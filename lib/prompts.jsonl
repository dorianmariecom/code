{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"hello world"},{"role":"assistant","content":"{\"input\":\"\\\"Hello World\\\"\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"print hello world"},{"role":"assistant","content":"{\"input\":\"puts(\\\"Hello world\\\")\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"maths"},{"role":"assistant","content":"{\"input\":\"2 \\\\* 3 + 1 / 4\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"print 3 times hello world"},{"role":"assistant","content":"{\"input\":\"3.times { puts(\\\"Hello World\\\") }\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"send an empty email to myself"},{"role":"assistant","content":"{\"input\":\"Mail.send\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"send an email to a list of persons"},{"role":"assistant","content":"{\"input\":\"[\\n  \\\"isidro_hackett@abernathy.test\\\",\\n  \\\"terence.prosacco@champlin.test\\\",\\n  \\\"ernie.schumm@ratke.example\\\",\\n  \\\"clarice@walsh.test\\\",\\n  \\\"jerald@hessel.test\\\",\\n].each do |to|\\n  Mail.send(to: to, subject: :Hi, body: \\\"How are you?\\\")\\nend\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"send an sms to myself"},{"role":"assistant","content":"{\"input\":\"Sms.send(body: :Hello)\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"send an sms if it's going to rain in paris tomorrow"},{"role":"assistant","content":"{\"input\":\"if Weather.raining?(query: \\\"Paris, France\\\", date: Date.tomorrow)\\n  Sms.send(body: \\\"It will be raining tomorrow\\\")\\nend\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"is it raining?"},{"role":"assistant","content":"{\"input\":\"Weather.raining?\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"is it raining in paris?"},{"role":"assistant","content":"{\"input\":\"Weather.raining?(query: \\\"Paris, France\\\")\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"will it be raining in paris tomorrow?"},{"role":"assistant","content":"{\"input\":\"Weather.raining?(query: \\\"Paris, France\\\", date: Date.tomorrow)\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"send a slack message"},{"role":"assistant","content":"{\"input\":\"Slack.send(body: :Hello)\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"send a slack message if it's going to be raining tomorrow"},{"role":"assistant","content":"{\"input\":\"if Weather.raining?(date: Date.tomorrow)\\n  Slack.send(body: \\\"It's going to be raining tomorrow\\\", channel: \\\"#weather\\\")\\nelse\\n  Slack.send(body: \\\"It's not going to be raining tomorrow\\\", channel: \\\"#weather\\\")\\nend\"}"}]}
{"messages":[{"role":"system","content":"Generate a JSON object with two fields: name and input\n\n`name` is the name of the program\n\n`input` is the code generated from the prompt in the Code language\n\n# Documentation\n\n## Hello World\n\ninput:\n\n    \"Hello World\"\n\nresult:\n\n    Hello World\n\n---\n\n## Printing Hello World\n\ninput:\n\n    puts(\"Hello world\")\n\noutput:\n\n    Hello World\n\n---\n\n## Maths\n\ninput:\n\n    1 + 1\n\nresult:\n\n    2\n\n---\n\n## Integer#times\n\ninput:\n\n    3.times { |i| puts(i) }\n\noutput:\n\n    0\n    1\n    2\n\nresult:\n\n    3\n\n---\n\n## Mail.send(from:, to:, subject:, body:)\n\n**from**: The email address(es) you send from, e.g. \"dominga\\_nolan@hirthe.example\", \"Karly Hamill DDS \u003cart\\_balistreri@streich.example\u003e\", default: your primary email address\n\n**to**: The email address(es) you send to, e.g. \"david@labadie-reilly.test\", \"Fr. Nerissa Romaguera \u003celvin@feest.test\u003e\", default: your primary email address\n\n**subject**: The subject of the email, e.g. \"The Man Within\", default: \"\"\n\n**body**: The body of the email, e.g. \"Re-contextualized contextually-based policy\", default: \"\"\n\n### Send an empty email to yourself\n\ninput:\n\n    Mail.send\n\n### Send a email to a list of persons\n\ninput:\n\n    [\n      \"isidro_hackett@abernathy.test\",\n      \"terence.prosacco@champlin.test\",\n      \"ernie.schumm@ratke.example\",\n      \"clarice@walsh.test\",\n      \"jerald@hessel.test\",\n    ].each do |to|\n      Mail.send(to: to, subject: \"Hello\")\n    end\n\n---\n\n## Sms.send(body:)\n\n**body**: The body of the text message, e.g. \"A Many-Splendoured Thing\", default: \"\"\n\n### Send an empty SMS to yourself\n\ninput\n\n    Sms.send\n\n### Send an SMS to yourself\n\ninput\n\n    Sms.send(body: \"How are you?\")\n\n### Send an SMS when it's going to rain tomorrow in Paris, France\n\ninput\n\n    if Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n      Sms.send(body: \"It will be raining tomorrow\")\n    end\n\n---\n\n## Weather.raining?(query:, date:)\n\n**query**: The location of the weather, e.g. \"657 Kindra Extension, West Sheron, RI 31642\", \"-35.48643855535515,-10.863481369711963\", default: Your location\n\n**date**: The date of the weather, e.g. Date.tomorrow, Date.today, Date.yesterday, 1.hour.from_now, 1.hour.ago, 2.hours.from_now, 2.hours.ago, default: Date.now\n\n### Check if it's raining\n\ninput\n\n    Weather.raining?\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France\n\ninput\n\n    Weather.raining?(query: \"Paris, France\")\n\noutput\n\n    false\n\n### Check if it's raining in Paris, France tomorrow\n\ninput\n\n    Weather.raining?(query: \"Paris, France\", date: Date.tomorrow)\n\noutput\n\n    true\n\n---\n\n## Slack.send(team:, channel:, body:)\n\n**team**: Your team ID or team name, e.g. \"A00AA0AAAAA\" or \"Lockman LLC\", default: Your primary slack account team\n\n**channel**: The channel you want to send to, e.g. \"#general\", \"#random\", \"#isaiah\", default: \"#general\"\n\n**body**: The body of the text message, e.g. \"I Sing the Body Electric\", default: \"\"\n\n### Send an empty Slack message to #general in your primary slack account\n\ninput\n\n    Slack.send\n\n### Send a Slack message to the #general channel\n\ninput\n\n    Slack.send(body: \"Hello everybody\")\n\n### Send a slack message to #weather if it's going to be raining tomorrow\n\ninput\n\n    if Weather.raining?(date: Date.tomorrow)\n      Slack.send(body: \"It's going to be raining tomorrow\", channel: \"#weather\")\n    else\n      Slack.send(body: \"It's not going to be raining tomorrow\", channel: \"#weather\")\n    end\n\n## Meetup::Group.new(handle)\n\n**handle**: Same as what's in the URL of the group on meetup.com, e.g. \"paris_rb\", :paris_rb, 'paris_rb'\n\ninput\n\n    Meetup::Group.new(:paris_rb)\n\noutput\n\n    paris_rb\n\n## Meetup::Group#events\n\n### Get the events from the meetup group paris_rb\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events\n\noutput\n\n    [\"Meetup::Event#297791280\", \"Meetup::Event#299466405\", \"Meetup::Event#297791270\"]\n\n### Send a reminder by SMS if meetups from the group ParisRb.new are going to happen in less than 1 day and in less than 2 hours\n\ninput\n\n    Meetup::Group.new(\"paris_rb\").events.each do |event|\n      next if event.past?\n\n      if event.time.before?(1.day.from_now)\n        unless Storage.exists?(id: event.id, type: :one_day_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in one day {event.url}\")\n          Storage.create!(id: event.id, type: :one_day_reminder)\n        end\n      end\n\n      if event.time.before?(2.hours.from_now)\n        unless Storage.exists?(id: event.id, type: :two_hours_reminder)\n          Sms.send(body: \"{event.group.name}: {event.title} in two hours {event.url}\")\n          Storage.create!(id: event.id, type: :two_hours_reminder)\n        end\n      end\n    end\n\n    nothing\n\n"},{"role":"user","content":"remind me of meetup events"},{"role":"assistant","content":"{\"input\":\"Meetup::Group.new(\\\"paris_rb\\\").events.each do |event|\\n  next if event.past?\\n\\n  if event.time.before?(1.day.from_now)\\n    unless Storage.exists?(id: event.id, type: :one_day_reminder)\\n      Sms.send(body: \\\"{event.group.name}: {event.title} in one day {event.url}\\\")\\n      Storage.create!(id: event.id, type: :one_day_reminder)\\n    end\\n  end\\n\\n  if event.time.before?(2.hours.from_now)\\n    unless Storage.exists?(id: event.id, type: :two_hours_reminder)\\n      Sms.send(body: \\\"{event.group.name}: {event.title} in two hours {event.url}\\\")\\n      Storage.create!(id: event.id, type: :two_hours_reminder)\\n    end\\n  end\\nend\"}"}]}
